/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package program;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import entity.*;
import java.util.Optional;
import java.time.LocalDate;
import java.time.LocalTime;

/**
 *
 * @author Gokhan
 */
public class Main extends javax.swing.JFrame {
    private static DAO MemberDAO;
    private static BookCatalogueDAO BookCatalogueDAO;
    private static PhysicalBookDAO PhysicalBookDAO;
    private static CheckoutDAO CheckoutDAO;
    
    public Main() {
        initComponents();
        refreshMemberTable();
        refreshBookCatalogueTable();
        refreshPhysicalBookTable();
        refreshCheckoutTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonCreateMember = new javax.swing.JButton();
        jButtonUpdateMember = new javax.swing.JButton();
        jButtonDeleteMember = new javax.swing.JButton();
        jTextFieldMemberID = new javax.swing.JTextField();
        jLabelStationID = new javax.swing.JLabel();
        jLabelStationColor = new javax.swing.JLabel();
        jTextFieldMemberFirstName = new javax.swing.JTextField();
        jScrollPaneTableStation = new javax.swing.JScrollPane();
        jTableMember = new javax.swing.JTable();
        jTextFieldMemberEmail = new javax.swing.JTextField();
        jLabelStationColor1 = new javax.swing.JLabel();
        jTextFieldMemberLastName = new javax.swing.JTextField();
        jLabelStationID1 = new javax.swing.JLabel();
        jTextFieldMemberPhoneNumber = new javax.swing.JTextField();
        jLabelStationColor2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabelPartID1 = new javax.swing.JLabel();
        jTextFieldBookCatalogueISBN = new javax.swing.JTextField();
        jTextFieldBookCatalogueTitle = new javax.swing.JTextField();
        jLabelPartStationID1 = new javax.swing.JLabel();
        jButtonCreateBookCatalogue = new javax.swing.JButton();
        jButtonUpdateBookCatalogue = new javax.swing.JButton();
        jButtonDeleteBookCatalogue = new javax.swing.JButton();
        jScrollPaneTablePart2 = new javax.swing.JScrollPane();
        jTableBookCatalogue = new javax.swing.JTable();
        jTextFieldBookCatalogueAuthor = new javax.swing.JTextField();
        jTextFieldBookCatalogueGenre = new javax.swing.JTextField();
        jLabelPartStationID2 = new javax.swing.JLabel();
        jLabelPartID2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButtonUpdatePhysicalBook = new javax.swing.JButton();
        jButtonDeletePhysicalBook = new javax.swing.JButton();
        jTextFieldPhysicalBookID = new javax.swing.JTextField();
        jLabelPartID = new javax.swing.JLabel();
        jTextFieldPhysicalBookISBN = new javax.swing.JTextField();
        jLabelPartStationID = new javax.swing.JLabel();
        jScrollPaneTablePart = new javax.swing.JScrollPane();
        jTablePhysicalBook = new javax.swing.JTable();
        jButtonCreatePhysicalBook = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        dateTimePickerCheckout = new com.github.lgooddatepicker.components.DateTimePicker();
        jScrollPaneTablePart1 = new javax.swing.JScrollPane();
        jTableCheckout = new javax.swing.JTable();
        jTextFieldCheckoutID = new javax.swing.JTextField();
        jTextFieldCheckoutBookID = new javax.swing.JTextField();
        jTextFieldCheckoutMemberID = new javax.swing.JTextField();
        jLabelStationColor3 = new javax.swing.JLabel();
        jLabelStationColor4 = new javax.swing.JLabel();
        jLabelStationID2 = new javax.swing.JLabel();
        jLabelStationColor5 = new javax.swing.JLabel();
        jLabelStationID3 = new javax.swing.JLabel();
        dateTimePickerReturn = new com.github.lgooddatepicker.components.DateTimePicker();
        jButtonCreateCheckout = new javax.swing.JButton();
        jButtonUpdateCheckout = new javax.swing.JButton();
        jButtonDeleteCheckout = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabelStationColor6 = new javax.swing.JLabel();
        jTextFieldCheckoutAmountDue = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jComboBoxCatalog = new javax.swing.JComboBox<>();
        jTextFieldCatalog = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPaneTablePart3 = new javax.swing.JScrollPane();
        jTableCatalog = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library Database");
        setResizable(false);

        jButtonCreateMember.setText("Create");
        jButtonCreateMember.setActionCommand("Insert");
        jButtonCreateMember.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonCreateMember.setIconTextGap(0);
        jButtonCreateMember.setInheritsPopupMenu(true);
        jButtonCreateMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateMemberActionPerformed(evt);
            }
        });

        jButtonUpdateMember.setText("Update");
        jButtonUpdateMember.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdateMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateMemberActionPerformed(evt);
            }
        });

        jButtonDeleteMember.setText("Delete");
        jButtonDeleteMember.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteMemberActionPerformed(evt);
            }
        });

        jLabelStationID.setText("Member ID");
        jLabelStationID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelStationColor.setText("First Name");
        jLabelStationColor.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jTextFieldMemberFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldMemberFirstNameKeyTyped(evt);
            }
        });

        jTableMember.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member ID", "First Name", "Last Name", "Email", "Phone Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMemberMouseClicked(evt);
            }
        });
        jScrollPaneTableStation.setViewportView(jTableMember);

        jTextFieldMemberEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldMemberEmailKeyTyped(evt);
            }
        });

        jLabelStationColor1.setText("Email");
        jLabelStationColor1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jTextFieldMemberLastName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldMemberLastNameKeyTyped(evt);
            }
        });

        jLabelStationID1.setText("Last Name");
        jLabelStationID1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jTextFieldMemberPhoneNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldMemberPhoneNumberKeyTyped(evt);
            }
        });

        jLabelStationColor2.setText("Phone Number");
        jLabelStationColor2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelStationColor2, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                        .addGap(78, 78, 78))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jButtonCreateMember, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addComponent(jButtonUpdateMember, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(77, 77, 77)
                                .addComponent(jButtonDeleteMember, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabelStationColor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelStationColor1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelStationID1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelStationID, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldMemberPhoneNumber)
                                    .addComponent(jTextFieldMemberEmail)
                                    .addComponent(jTextFieldMemberFirstName)
                                    .addComponent(jTextFieldMemberLastName)
                                    .addComponent(jTextFieldMemberID))))
                        .addGap(52, 52, 52)))
                .addComponent(jScrollPaneTableStation, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPaneTableStation, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 29, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMemberID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStationID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMemberFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStationColor, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMemberLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStationID1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMemberEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStationColor1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMemberPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStationColor2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonUpdateMember, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteMember, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreateMember, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonCreateMember.getAccessibleContext().setAccessibleName("Insert");

        jTabbedPane1.addTab("Member", jPanel1);

        jLabelPartID1.setText("Title");
        jLabelPartID1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jTextFieldBookCatalogueTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldBookCatalogueTitleKeyTyped(evt);
            }
        });

        jLabelPartStationID1.setText("ISBN");
        jLabelPartStationID1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelPartStationID1.setToolTipText("");

        jButtonCreateBookCatalogue.setText("Create");
        jButtonCreateBookCatalogue.setActionCommand("Insert");
        jButtonCreateBookCatalogue.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonCreateBookCatalogue.setIconTextGap(0);
        jButtonCreateBookCatalogue.setInheritsPopupMenu(true);
        jButtonCreateBookCatalogue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateBookCatalogueActionPerformed(evt);
            }
        });

        jButtonUpdateBookCatalogue.setText("Update");
        jButtonUpdateBookCatalogue.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdateBookCatalogue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateBookCatalogueActionPerformed(evt);
            }
        });

        jButtonDeleteBookCatalogue.setText("Delete");
        jButtonDeleteBookCatalogue.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteBookCatalogue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteBookCatalogueActionPerformed(evt);
            }
        });

        jTableBookCatalogue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Title", "Author", "Genre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableBookCatalogue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBookCatalogueMouseClicked(evt);
            }
        });
        jScrollPaneTablePart2.setViewportView(jTableBookCatalogue);

        jTextFieldBookCatalogueAuthor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldBookCatalogueAuthorKeyTyped(evt);
            }
        });

        jTextFieldBookCatalogueGenre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldBookCatalogueGenreKeyTyped(evt);
            }
        });

        jLabelPartStationID2.setText("Author");
        jLabelPartStationID2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelPartStationID2.setToolTipText("");

        jLabelPartID2.setText("Genre");
        jLabelPartID2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelPartStationID1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelPartID1, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(jLabelPartStationID2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelPartID2, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldBookCatalogueTitle)
                                .addComponent(jTextFieldBookCatalogueISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldBookCatalogueGenre)
                                .addComponent(jTextFieldBookCatalogueAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(65, 65, 65))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jButtonCreateBookCatalogue, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonUpdateBookCatalogue, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(jButtonDeleteBookCatalogue, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPaneTablePart2, javax.swing.GroupLayout.PREFERRED_SIZE, 749, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldBookCatalogueISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPartStationID1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldBookCatalogueTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPartID1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldBookCatalogueAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPartStationID2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldBookCatalogueGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPartID2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonUpdateBookCatalogue, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteBookCatalogue, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreateBookCatalogue, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPaneTablePart2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 29, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Book Catalogue", jPanel5);

        jButtonUpdatePhysicalBook.setText("Update");
        jButtonUpdatePhysicalBook.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdatePhysicalBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdatePhysicalBookActionPerformed(evt);
            }
        });

        jButtonDeletePhysicalBook.setText("Delete");
        jButtonDeletePhysicalBook.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeletePhysicalBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletePhysicalBookActionPerformed(evt);
            }
        });

        jLabelPartID.setText("Book ID");
        jLabelPartID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelPartStationID.setText("ISBN");
        jLabelPartStationID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelPartStationID.setToolTipText("");

        jTablePhysicalBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "ISBN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePhysicalBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePhysicalBookMouseClicked(evt);
            }
        });
        jScrollPaneTablePart.setViewportView(jTablePhysicalBook);

        jButtonCreatePhysicalBook.setText("Create");
        jButtonCreatePhysicalBook.setActionCommand("Insert");
        jButtonCreatePhysicalBook.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonCreatePhysicalBook.setIconTextGap(0);
        jButtonCreatePhysicalBook.setInheritsPopupMenu(true);
        jButtonCreatePhysicalBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreatePhysicalBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonCreatePhysicalBook, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelPartID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelPartStationID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextFieldPhysicalBookISBN)
                        .addComponent(jTextFieldPhysicalBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonUpdatePhysicalBook, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77)
                        .addComponent(jButtonDeletePhysicalBook, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47)
                .addComponent(jScrollPaneTablePart, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPartID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPhysicalBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPhysicalBookISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPartStationID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonUpdatePhysicalBook, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeletePhysicalBook, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreatePhysicalBook, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPaneTablePart, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 29, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Physical Book", jPanel2);

        jTableCheckout.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Checkout ID", "Book ID", "Member ID", "Checkout Time", "Return Time", "Amount Due"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCheckout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCheckoutMouseClicked(evt);
            }
        });
        jScrollPaneTablePart1.setViewportView(jTableCheckout);

        jTextFieldCheckoutID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCheckoutIDActionPerformed(evt);
            }
        });

        jLabelStationColor3.setText("Return Time");
        jLabelStationColor3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelStationColor4.setText("Checkout Time");
        jLabelStationColor4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelStationID2.setText("Member ID");
        jLabelStationID2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelStationColor5.setText("Book ID");
        jLabelStationColor5.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelStationID3.setText("Checkout ID");
        jLabelStationID3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jButtonCreateCheckout.setText("Create");
        jButtonCreateCheckout.setActionCommand("Insert");
        jButtonCreateCheckout.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonCreateCheckout.setIconTextGap(0);
        jButtonCreateCheckout.setInheritsPopupMenu(true);
        jButtonCreateCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateCheckoutActionPerformed(evt);
            }
        });

        jButtonUpdateCheckout.setText("Update");
        jButtonUpdateCheckout.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdateCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateCheckoutActionPerformed(evt);
            }
        });

        jButtonDeleteCheckout.setText("Delete");
        jButtonDeleteCheckout.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteCheckoutActionPerformed(evt);
            }
        });

        jLabelStationColor6.setText("Amount Due");
        jLabelStationColor6.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jTextFieldCheckoutAmountDue.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(jButtonUpdateCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(75, 75, 75)
                                .addComponent(jButtonDeleteCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonCreateCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabelStationColor5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelStationColor4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelStationID2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelStationID3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabelStationColor3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, 0)
                                .addComponent(jLabelStationColor6, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldCheckoutBookID)
                            .addComponent(jTextFieldCheckoutMemberID)
                            .addComponent(dateTimePickerReturn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateTimePickerCheckout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldCheckoutID)
                            .addComponent(jTextFieldCheckoutAmountDue, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPaneTablePart1, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPaneTablePart1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCheckoutID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStationID3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCheckoutBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStationColor5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCheckoutMemberID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStationID2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelStationColor4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateTimePickerCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelStationColor3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateTimePickerReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel3))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldCheckoutAmountDue, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelStationColor6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonUpdateCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonDeleteCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonCreateCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Checkout", jPanel3);

        jComboBoxCatalog.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Author", "Genre" }));

        jTextFieldCatalog.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldCatalogKeyTyped(evt);
            }
        });

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Welcome");
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N

        jLabel2.setText("Search the catalog");
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jTableCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Title", "Author", "Genre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCatalog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCatalogMouseClicked(evt);
            }
        });
        jScrollPaneTablePart3.setViewportView(jTableCatalog);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel1))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextFieldCatalog, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxCatalog, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSearch)))
                .addGap(21, 21, 21)
                .addComponent(jScrollPaneTablePart3, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneTablePart3, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(32, 32, 32)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxCatalog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldCatalog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSearch))))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Catalog", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreateMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateMemberActionPerformed
        // TODO add your handling code here:
        
        if (!jTextFieldMemberID.getText().isEmpty()) {
            try {
            int ID = Integer.parseInt(jTextFieldMemberID.getText().trim());
            String firstname = jTextFieldMemberFirstName.getText().trim();
            String lastname = jTextFieldMemberLastName.getText().trim();
            String email = jTextFieldMemberEmail.getText().trim();
            String phonenumber = jTextFieldMemberPhoneNumber.getText().trim();
            //String lName = txtLName.getText().trim();
            //String phoneNumber = txtPhoneNumber.getText().trim();
            Member member = getMember(ID);
            if(member.getID() == -1) {
                addMember(ID, firstname, lastname, email, phonenumber);
                refreshMemberTable();
                clearTextFieldsMember();
            }
            else {
                alert("Member ID already exists, please try another one", "Primary Key Violation");
            }
            }
            catch (NumberFormatException e) {
                alert("Member ID must be in integer format.", "Number format exception");
            }
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
        
    }//GEN-LAST:event_jButtonCreateMemberActionPerformed

    private void jButtonUpdateMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateMemberActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldMemberID.getText().isEmpty()) {
            try {
            int ID = Integer.parseInt(jTextFieldMemberID.getText().trim());
            String firstname = jTextFieldMemberFirstName.getText().trim();
            String lastname = jTextFieldMemberLastName.getText().trim();
            String email = jTextFieldMemberEmail.getText().trim();
            String phonenumber = jTextFieldMemberPhoneNumber.getText().trim();
            Member member = getMember(ID);
            if(member.getID() != -1) {
                updateMember(ID, firstname, lastname, email, phonenumber); //
                refreshMemberTable();
            }
            else
            {
                alert("Member ID does not exist", "Update error");
            }
        
            } catch (NumberFormatException e) {
                alert("Member ID must be in integer format.", "Number format exception");
            }
        }
        else
        {
            alert("Member ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateMemberActionPerformed

    //set the values of a row to the textfields
    private void jTableMemberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMemberMouseClicked
        // TODO add your handling code here:
        int i = jTableMember.getSelectedRow();
        TableModel model = jTableMember.getModel();
        jTextFieldMemberID.setText(model.getValueAt(i, 0).toString());
        jTextFieldMemberFirstName.setText(model.getValueAt(i, 1).toString());
        jTextFieldMemberLastName.setText(model.getValueAt(i, 2).toString());
        jTextFieldMemberEmail.setText(model.getValueAt(i, 3).toString());
        jTextFieldMemberPhoneNumber.setText(model.getValueAt(i, 4).toString());
    }//GEN-LAST:event_jTableMemberMouseClicked

    //handles delete button action
    private void jButtonDeleteMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteMemberActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldMemberID.getText().isEmpty()) {
            try {
            int ID = Integer.parseInt(jTextFieldMemberID.getText().trim());
            String firstname = jTextFieldMemberFirstName.getText().trim();
            String lastname = jTextFieldMemberLastName.getText().trim();
            String email = jTextFieldMemberEmail.getText().trim();
            String phonenumber = jTextFieldMemberPhoneNumber.getText().trim();
                    
            Member member = getMember(ID);
            if(member.getID() == -1) {
                alert("Member ID does not exist", "Delete error");
            }
            else if(CheckoutDAO.checkFKViolation(ID)) {
                alert("Checkouts found for this member.  Please delete associated checkouts first.");
                }
            
            else
            {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteMember(ID, firstname, lastname, email, phonenumber);
                    refreshMemberTable();
                    clearTextFieldsMember();
                }
            }
            }catch (NumberFormatException e) {
                alert("Member ID must be in integer format.", "Number format exception");
            }
        }
        else
        {
            alert("Member ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteMemberActionPerformed
   
    
    private void jButtonUpdatePhysicalBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdatePhysicalBookActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldPhysicalBookID.getText().isEmpty()) {
            try {
            int ID = Integer.parseInt(jTextFieldPhysicalBookID.getText().trim());
            
            int isbn = Integer.parseInt(jTextFieldPhysicalBookISBN.getText().trim());
            PhysicalBook physicalbook = getPhysicalBook(ID);
            if(physicalbook.getID() != -1) {
                updatePhysicalBook(ID, isbn);
                refreshPhysicalBookTable();
            }
            else
            {
                alert("Book ID does not exist", "Update error");
            }
            } catch (NumberFormatException e) {
                alert("ID and ISBN must be in integer format.", "Number format exception");
            }
        }
        else
        {
            alert("Book ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdatePhysicalBookActionPerformed

    private void jButtonDeletePhysicalBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletePhysicalBookActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldPhysicalBookID.getText().isEmpty()) {
            try {
            int ID = Integer.parseInt(jTextFieldPhysicalBookID.getText().trim());
            int isbn = Integer.parseInt(jTextFieldPhysicalBookISBN.getText().trim());
            PhysicalBook physicalbook = getPhysicalBook(ID);
            if(physicalbook.getID() == -1) {
                alert("Book ID does not exist", "Delete error");
            }
            else if(CheckoutDAO.checkFKViolationbook(ID)) {
                alert("Checkouts found for this book.  Please delete associated checkouts first.");
                }
            else
            {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deletePhysicalBook(ID, isbn);
                    refreshPhysicalBookTable();
                    clearTextFieldsPhysicalBook();
                }
            }
            } catch (NumberFormatException e) {
                alert("ID and ISBN must be in integer format.", "Number format exception");
            }
        }
        else
        {
            alert("Book ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeletePhysicalBookActionPerformed

    private void jTablePhysicalBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePhysicalBookMouseClicked
        // TODO add your handling code here:
         int i = jTablePhysicalBook.getSelectedRow();
        TableModel model = jTablePhysicalBook.getModel();
        jTextFieldPhysicalBookID.setText(model.getValueAt(i, 0).toString());
        jTextFieldPhysicalBookISBN.setText(model.getValueAt(i,1).toString());
    }//GEN-LAST:event_jTablePhysicalBookMouseClicked

    
    private void jButtonCreatePhysicalBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreatePhysicalBookActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldPhysicalBookID.getText().isEmpty()) {
            try {
            int ID = Integer.parseInt(jTextFieldPhysicalBookID.getText().trim());
            int isbn = Integer.parseInt(jTextFieldPhysicalBookISBN.getText().trim());
            
            PhysicalBook physicalbook = getPhysicalBook(ID);
            if(physicalbook.getID() == -1) {
                addPhysicalBook(ID, isbn);
                refreshPhysicalBookTable();
                clearTextFieldsPhysicalBook();
            }
            else {
                alert("Book ID already exists, please try another one", "Primary Key Violation");
            }
            } catch (NumberFormatException e) {
                alert("ID and ISBN must be in integer format.", "Number format exception");
            }
        }
        else
        {
            alert("Book ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonCreatePhysicalBookActionPerformed
   
                                                       

    private void jButtonCreateBookCatalogueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateBookCatalogueActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldBookCatalogueISBN.getText().isEmpty()) {
            try {
            int isbn = Integer.parseInt(jTextFieldBookCatalogueISBN.getText().trim());
            String title = jTextFieldBookCatalogueTitle.getText().trim();
            String author = jTextFieldBookCatalogueAuthor.getText().trim();
            String genre = jTextFieldBookCatalogueGenre.getText().trim();
            BookCatalogue bookcatalogue = getBookCatalogue(isbn);
            if(bookcatalogue.getISBN() == -1) {
                addBookCatalogue(isbn, title, author, genre);
                refreshBookCatalogueTable();
                clearTextFieldsBookCatalogue();
            }
            else {
                alert("Book ISBN already exists, please try another one", "Primary Key Violation");
            }
            } catch (NumberFormatException e) {
                alert("ISBN must be in integer format.", "Number format exception");
            }
        }
        else
        {
            alert("ISBN cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonCreateBookCatalogueActionPerformed

    private void jButtonUpdateBookCatalogueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateBookCatalogueActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldBookCatalogueISBN.getText().isEmpty()) {
            try {
            int isbn = Integer.parseInt(jTextFieldBookCatalogueISBN.getText().trim());
            String title = jTextFieldBookCatalogueTitle.getText().trim();
            String author = jTextFieldBookCatalogueAuthor.getText().trim();
            String genre = jTextFieldBookCatalogueGenre.getText().trim();
            BookCatalogue bookcatalogue = getBookCatalogue(isbn);
            
            if(bookcatalogue.getISBN() != -1) {
                updateBookCatalogue(isbn, title, author, genre);
                refreshBookCatalogueTable();
            }
            else
            {
                alert("Book ISBN does not exist", "Update error");
            }
        } catch (NumberFormatException e) {
            alert("ISBN must be integer format.", "Number format exception");
        }
        }
        else
        {
            alert("Book ISBN cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateBookCatalogueActionPerformed

    private void jButtonDeleteBookCatalogueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteBookCatalogueActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldBookCatalogueISBN.getText().isEmpty()) {
            try {
            int isbn = Integer.parseInt(jTextFieldBookCatalogueISBN.getText().trim());
            String title = jTextFieldBookCatalogueTitle.getText().trim();
            String author = jTextFieldBookCatalogueAuthor.getText().trim();
            String genre = jTextFieldBookCatalogueGenre.getText().trim();
            BookCatalogue bookcatalogue = getBookCatalogue(isbn);
            if(bookcatalogue.getISBN() == -1) {
                alert("Book ISBN does not exist", "Delete error");
            }
            else if(PhysicalBookDAO.checkFKViolation(isbn)) {
                alert("Copies found for this book.  Please delete associated book copies first.");
                }
            
            else
            {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteBookCatalogue(isbn, title, author, genre);
                    refreshBookCatalogueTable();
                    clearTextFieldsBookCatalogue();
                }
            }
            } catch (NumberFormatException e) {
                alert("ISBN must be in integer format.", "Number format exception");
            }
           
        }
        else
        {
            alert("Member ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteBookCatalogueActionPerformed

    private void jTableBookCatalogueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBookCatalogueMouseClicked
        // TODO add your handling code here:
        int i = jTableBookCatalogue.getSelectedRow();
        TableModel model = jTableBookCatalogue.getModel();
        jTextFieldBookCatalogueISBN.setText(model.getValueAt(i, 0).toString());
        jTextFieldBookCatalogueTitle.setText(model.getValueAt(i, 1).toString());
        jTextFieldBookCatalogueAuthor.setText(model.getValueAt(i, 2).toString());
        jTextFieldBookCatalogueGenre.setText(model.getValueAt(i, 3).toString());
    }//GEN-LAST:event_jTableBookCatalogueMouseClicked

    private void jTableCatalogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCatalogMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTableCatalogMouseClicked

    private void jButtonDeleteCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteCheckoutActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldCheckoutID.getText().isEmpty()) {
            double amountdue = 0;
            try {
            int ID = Integer.parseInt(jTextFieldCheckoutID.getText().trim());
            int bookID = Integer.parseInt(jTextFieldCheckoutBookID.getText().trim());
            int memberID = Integer.parseInt(jTextFieldCheckoutMemberID.getText().trim());
            /*if (dateTimePickerCheckout.datePicker.getDateStringOrEmptyString().length() == 0 || dateTimePickerCheckout.timePicker.getTimeStringOrEmptyString().length() == 0 || dateTimePickerReturn.datePicker.getDateStringOrEmptyString().length() == 0 || dateTimePickerReturn.timePicker.getTimeStringOrEmptyString().length() == 0) {
                alert("Yo");
            }*/
            String dateTimeCheckout = dateTimePickerCheckout.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerCheckout.timePicker.getTimeStringOrEmptyString()+":00.0";
            String dateTimeReturn = dateTimePickerReturn.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerReturn.timePicker.getTimeStringOrEmptyString()+":00.0";
            
            if (jTextFieldCheckoutAmountDue.getText().equals("")) {
                amountdue = 0;
            }
            else {
                amountdue = Double.parseDouble(jTextFieldCheckoutAmountDue.getText().trim());
            
            }
            Checkout checkout = getCheckout(ID);

            if(checkout.getID() == -1) {
                alert("Checkout ID does not exist", "Delete error");
            }
            else
            {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteCheckout(ID, bookID, memberID, dateTimeCheckout, dateTimeReturn, amountdue);
                    refreshCheckoutTable();
                    clearTextFieldsCheckout();
                }
            }
            } catch (NumberFormatException e) {
                alert("Incorrect number format.", "Number format exception");
            }
        }
        
        else
        {
            alert("Checkout ID cannot be empty", "Delete error");
        }
        
    }//GEN-LAST:event_jButtonDeleteCheckoutActionPerformed

    private void jButtonUpdateCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateCheckoutActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldCheckoutID.getText().isEmpty()) {
            try {
            int ID = Integer.parseInt(jTextFieldCheckoutID.getText().trim());
            int bookID = Integer.parseInt(jTextFieldCheckoutBookID.getText().trim());
            int memberID = Integer.parseInt(jTextFieldCheckoutMemberID.getText().trim());
             if (dateTimePickerCheckout.datePicker.getDateStringOrEmptyString().length() == 0 || dateTimePickerCheckout.timePicker.getTimeStringOrEmptyString().length() == 0 || dateTimePickerReturn.datePicker.getDateStringOrEmptyString().length() == 0 || dateTimePickerReturn.timePicker.getTimeStringOrEmptyString().length() == 0) {
                alert("Incorrect date/time format.");
            }
            else {
            String dateTimeCheckout = dateTimePickerCheckout.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerCheckout.timePicker.getTimeStringOrEmptyString()+":00.0";
            String dateTimeReturn = dateTimePickerReturn.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerReturn.timePicker.getTimeStringOrEmptyString()+":00.0";
            double amountdue = Double.parseDouble(jTextFieldCheckoutAmountDue.getText().trim());
            
            Checkout checkout = getCheckout(ID);

            if(checkout.getID() != -1) {
                updateCheckout(ID, bookID, memberID, dateTimeCheckout, dateTimeReturn, amountdue);
                refreshCheckoutTable();
            }
            else
            {
                alert("Checkout ID does not exist", "Update error");
            }}
            } catch (NumberFormatException e) {
                alert("Incorrect number format.", "Number format exception");
            }
        }
        else
        {
            alert("Checkout ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateCheckoutActionPerformed

    private void jButtonCreateCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateCheckoutActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldCheckoutID.getText().isEmpty()) {
            double amountdue = 0;
            try {
            int ID = Integer.parseInt(jTextFieldCheckoutID.getText().trim());
            int bookID = Integer.parseInt(jTextFieldCheckoutBookID.getText().trim());
            int memberID = Integer.parseInt(jTextFieldCheckoutMemberID.getText().trim());
            if (dateTimePickerCheckout.datePicker.getDateStringOrEmptyString().length() == 0 || dateTimePickerCheckout.timePicker.getTimeStringOrEmptyString().length() == 0 || dateTimePickerReturn.datePicker.getDateStringOrEmptyString().length() == 0 || dateTimePickerReturn.timePicker.getTimeStringOrEmptyString().length() == 0) {
                alert("Incorrect date/time format.");
            }
            else {
            String dateTimeCheckout = dateTimePickerCheckout.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerCheckout.timePicker.getTimeStringOrEmptyString()+":00.0";
            String dateTimeReturn = dateTimePickerReturn.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerReturn.timePicker.getTimeStringOrEmptyString()+":00.0";
            if (jTextFieldCheckoutAmountDue.getText().equals("")) {
                amountdue = 0;
            }
            else {
                amountdue = Double.parseDouble(jTextFieldCheckoutAmountDue.getText().trim());
            }
            Checkout checkout = getCheckout(ID);
            if(checkout.getID() == -1) {
                addCheckout(ID, bookID, memberID, dateTimeCheckout, dateTimeReturn, amountdue);
                refreshCheckoutTable();
                clearTextFieldsCheckout();
            }
            else {
                alert("Checkout ID already exists, please try another one", "Primary Key Violation");
            }}
            } catch (NumberFormatException e) {
                alert("Incorrect number format.", "Number format exception");
            }
        }  
        else
        {
            alert("Checkout ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonCreateCheckoutActionPerformed

    private void jTextFieldCheckoutIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCheckoutIDActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextFieldCheckoutIDActionPerformed

    private void jTableCheckoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCheckoutMouseClicked
        // TODO add your handling code here:
        int i = jTableCheckout.getSelectedRow();
        TableModel model = jTableCheckout.getModel();
        jTextFieldCheckoutID.setText(model.getValueAt(i, 0).toString());
        jTextFieldCheckoutBookID.setText(model.getValueAt(i, 1).toString());
        jTextFieldCheckoutMemberID.setText(model.getValueAt(i, 2).toString());
        String date = model.getValueAt(i, 3).toString();
        /**
        * Takes the String value from the Order Date Time column and parse the String using substring method.
        * LocalDate.of() takes in 3 integer value of year, month, date and returns a LocalDate object. LocalDate.of(y, m, d)
        * LocalTime.of() similarly takes in 2 integer value of hour, minute. LocalTime.of(h, m)
        * Example:
        * String date = 2021-02-23 08:49:11.556;
        * date.substring(0, 4) returns 2021 /year
        * date.substring(5, 7) returns 02 /month
        * date.substring(8, 10) returns 23 /day
        * date.substring(11, 13) returns 08 /hour
        * date.substring(14, 16) returns 49 /min
        */
        LocalDate date1 = LocalDate.of(Integer.parseInt(date.substring(0, 4)) ,
            Integer.parseInt(date.substring(5, 7)), Integer.parseInt(date.substring(8, 10)));
        LocalTime time1 = LocalTime.of(Integer.parseInt(date.substring(11, 13)), Integer.parseInt(date.substring(14, 16)));

        /**
        * LocalDate object is inserted into datePicker.setDate() to set the value of the dataPicker.
        * LocalTime object is inserted into timePicker.setTime() to set the value of the timePicker.
        */
        dateTimePickerCheckout.datePicker.setDate(date1);
        dateTimePickerCheckout.timePicker.setTime(time1);

        String rdate = model.getValueAt(i, 4).toString();
        /**
        * Takes the String value from the Order Date Time column and parse the String using substring method.
        * LocalDate.of() takes in 3 integer value of year, month, date and returns a LocalDate object. LocalDate.of(y, m, d)
        * LocalTime.of() similarly takes in 2 integer value of hour, minute. LocalTime.of(h, m)
        * Example:
        * String date = 2021-02-23 08:49:11.556;
        * date.substring(0, 4) returns 2021 /year
        * date.substring(5, 7) returns 02 /month
        * date.substring(8, 10) returns 23 /day
        * date.substring(11, 13) returns 08 /hour
        * date.substring(14, 16) returns 49 /min
        */
        LocalDate date12 = LocalDate.of(Integer.parseInt(rdate.substring(0, 4)) ,
            Integer.parseInt(rdate.substring(5, 7)), Integer.parseInt(rdate.substring(8, 10)));
        LocalTime time12 = LocalTime.of(Integer.parseInt(rdate.substring(11, 13)), Integer.parseInt(rdate.substring(14, 16)));

        /**
        * LocalDate object is inserted into datePicker.setDate() to set the value of the dataPicker.
        * LocalTime object is inserted into timePicker.setTime() to set the value of the timePicker.
        */
        dateTimePickerReturn.datePicker.setDate(date12);
        dateTimePickerReturn.timePicker.setTime(time12);
    }//GEN-LAST:event_jTableCheckoutMouseClicked

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        if (jComboBoxCatalog.getSelectedItem() == "Title") {
            getAllTitle(jTextFieldCatalog.getText());
        }
        else if (jComboBoxCatalog.getSelectedItem() == "Author") {
            getAllAuthor(jTextFieldCatalog.getText());
        }
        else if (jComboBoxCatalog.getSelectedItem() ==  "Genre") {
            getAllGenre(jTextFieldCatalog.getText());
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jTextFieldBookCatalogueTitleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBookCatalogueTitleKeyTyped
        // TODO add your handling code here:
        if (jTextFieldBookCatalogueTitle.getText().length() >= 20 ) {
                evt.consume();
                JOptionPane.showMessageDialog(null, "Title cannot exceed 20 characters.");
        }
    }//GEN-LAST:event_jTextFieldBookCatalogueTitleKeyTyped

    private void jTextFieldMemberFirstNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMemberFirstNameKeyTyped
        // TODO add your handling code here:
        if (jTextFieldMemberFirstName.getText().length() >= 20 ) {
                evt.consume();
                JOptionPane.showMessageDialog(null, "First name cannot exceed 20 characters.");
        }
    }//GEN-LAST:event_jTextFieldMemberFirstNameKeyTyped

    private void jTextFieldMemberLastNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMemberLastNameKeyTyped
        // TODO add your handling code here:
        if (jTextFieldMemberLastName.getText().length() >= 20 ) {
                evt.consume();
                JOptionPane.showMessageDialog(null, "Last name cannot exceed 20 characters.");
        }
    }//GEN-LAST:event_jTextFieldMemberLastNameKeyTyped

    private void jTextFieldMemberEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMemberEmailKeyTyped
        // TODO add your handling code here:
        if (jTextFieldMemberEmail.getText().length() >= 20 ) {
                evt.consume();
                JOptionPane.showMessageDialog(null, "Email cannot exceed 20 characters.");
        }
    }//GEN-LAST:event_jTextFieldMemberEmailKeyTyped

    private void jTextFieldMemberPhoneNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMemberPhoneNumberKeyTyped
        // TODO add your handling code here:
        if (jTextFieldMemberPhoneNumber.getText().length() >= 20 ) {
                evt.consume();
                JOptionPane.showMessageDialog(null, "Phone number cannot exceed 20 characters.");
        }
    }//GEN-LAST:event_jTextFieldMemberPhoneNumberKeyTyped

    private void jTextFieldBookCatalogueAuthorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBookCatalogueAuthorKeyTyped
        // TODO add your handling code here:
        if (jTextFieldBookCatalogueAuthor.getText().length() >= 20 ) {
                evt.consume();
                JOptionPane.showMessageDialog(null, "Author cannot exceed 20 characters.");
        }
    }//GEN-LAST:event_jTextFieldBookCatalogueAuthorKeyTyped

    private void jTextFieldBookCatalogueGenreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBookCatalogueGenreKeyTyped
        // TODO add your handling code here:
        if (jTextFieldBookCatalogueGenre.getText().length() >= 20 ) {
                evt.consume();
                JOptionPane.showMessageDialog(null, "Genre cannot exceed 20 characters.");
        }
    }//GEN-LAST:event_jTextFieldBookCatalogueGenreKeyTyped

    private void jTextFieldCatalogKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCatalogKeyTyped
        // TODO add your handling code here:
        if (jTextFieldCatalog.getText().length() >= 20 ) {
                evt.consume();
                JOptionPane.showMessageDialog(null, "Input cannot exceed 20 characters.");
        }
    }//GEN-LAST:event_jTextFieldCatalogKeyTyped

    //method to show an info alert
    public void alert(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    //method to show an error alert
    public void alert(String msg, String title) {
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }


    private static void addMember(int id, String firstname, String lastname, String email, String phonenumber) {
        Member member;
        member = new Member(id, firstname, lastname, email, phonenumber);
        MemberDAO.insert(member);
    }
    
    private static void addBookCatalogue(int ISBN, String title, String author, String genre) {
        BookCatalogue bookcatalogue;
        bookcatalogue = new BookCatalogue(ISBN, title, author, genre);
        BookCatalogueDAO.insert(bookcatalogue);
    }
    
    private static void addPhysicalBook(int id, int ISBN) {
        PhysicalBook physicalbook;
        physicalbook = new PhysicalBook(id, ISBN);
        PhysicalBookDAO.insert(physicalbook);
    }
    
    private static void addCheckout(int id, int bookID, int memberID, String checkoutDateTime, String returnDateTime, double amountdue) {
        Checkout checkout;
        checkout = new Checkout(id, bookID, memberID, checkoutDateTime, returnDateTime, amountdue);
        CheckoutDAO.insert(checkout);
    }
    
       private static void updateMember(int id, String firstname, String lastname, String email, String phonenumber) {
        Member member;
        member = new Member(id, firstname, lastname, email, phonenumber);
        MemberDAO.update(member);
    }
    private static void deleteMember(int id, String firstname, String lastname, String email, String phonenumber) {
        Member member;
        member = new Member(id, firstname, lastname, email, phonenumber);
        MemberDAO.delete(member);
    }
    private static void updateBookCatalogue(int ISBN, String title, String author, String genre) {
        BookCatalogue bookcatalogue;
        bookcatalogue = new BookCatalogue(ISBN, title, author, genre);
        BookCatalogueDAO.update(bookcatalogue);
    }
    private static void deleteBookCatalogue(int ISBN, String title, String author, String genre) {
        BookCatalogue bookcatalogue;
        bookcatalogue = new BookCatalogue(ISBN, title, author, genre);
        BookCatalogueDAO.delete(bookcatalogue);
    }
    private static void updatePhysicalBook(int id, int ISBN) {
        PhysicalBook physicalbook;
        physicalbook = new PhysicalBook(id, ISBN);
        PhysicalBookDAO.update(physicalbook);
    }
    private static void deletePhysicalBook(int id, int ISBN) {
        PhysicalBook physicalbook;
        physicalbook = new PhysicalBook(id, ISBN);
        PhysicalBookDAO.delete(physicalbook);
    }
    private static void updateCheckout(int id, int bookID, int memberID, String checkoutDateTime, String returnDateTime, double amountdue) {
        Checkout checkout;
        checkout = new Checkout(id, bookID, memberID, checkoutDateTime, returnDateTime, amountdue);
        CheckoutDAO.update(checkout);
    }
    private static void deleteCheckout(int id, int bookID, int memberID, String checkoutDateTime,String returnDateTime, double amountdue) {
        Checkout checkout;
        checkout = new Checkout(id, bookID, memberID, checkoutDateTime, returnDateTime, amountdue);
        CheckoutDAO.delete(checkout);
    }
    

    static Member getMember(int id) {
        Optional<Member> member = MemberDAO.get(id);
        return member.orElseGet(() -> new Member(-1, "Non-exist", "Non-exist", "Non-exist", "Non-exist"));
    }
    
    static BookCatalogue getBookCatalogue(int isbn) {
        Optional<BookCatalogue> bookcatalogue = BookCatalogueDAO.get(isbn);
        return bookcatalogue.orElseGet(() -> new BookCatalogue(-1, "Non-exist", "Non-exist", "Non-exist"));
    }
    
    static PhysicalBook getPhysicalBook(int id) {
        Optional<PhysicalBook> physicalbook = PhysicalBookDAO.get(id);
        return physicalbook.orElseGet(() -> new PhysicalBook(-1, -1));
    }
    
    static Checkout getCheckout(int id) {
        Optional<Checkout> checkout = CheckoutDAO.get(id);
        return checkout.orElseGet(() -> new Checkout(-1, -1, -1, "Non-exist", "Non-exist", -1));
    }
    
    //method to clear the txt fields
    private void clearTextFieldsMember() {
        jTextFieldMemberID.setText("");
        jTextFieldMemberFirstName.setText("");
        jTextFieldMemberLastName.setText("");
        jTextFieldMemberEmail.setText("");
        jTextFieldMemberPhoneNumber.setText("");
    }
    
    private void clearTextFieldsBookCatalogue() {
        jTextFieldBookCatalogueISBN.setText("");
        jTextFieldBookCatalogueTitle.setText("");
        jTextFieldBookCatalogueAuthor.setText("");
        jTextFieldBookCatalogueGenre.setText("");
    }
   
    private void clearTextFieldsPhysicalBook() {
        jTextFieldPhysicalBookID.setText("");
        jTextFieldPhysicalBookISBN.setText("");
        
    }
    
    private void clearTextFieldsCheckout() {
        jTextFieldCheckoutID.setText("");
        jTextFieldCheckoutMemberID.setText("");
        jTextFieldCheckoutBookID.setText("");
        dateTimePickerCheckout.clear();
        dateTimePickerReturn.clear();
        jTextFieldCheckoutAmountDue.setText("0");
        
        
    }

    //fetch 

    
    private void refreshMemberTable() {
        List<Member> members = MemberDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableMember.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Member member : members) {
                Object[] row = new Object[5]; //was 4
                row[0] = member.getID();
                row[1] = member.getFirstname();
                row[2] = member.getLastname();
                row[3] = member.getEmail();
                row[4] = member.getPhonenumber();
                model.addRow(row);
        }
    }
    
    private void refreshBookCatalogueTable() {
        List<BookCatalogue> bookcatalogues = BookCatalogueDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableBookCatalogue.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (BookCatalogue bookcatalogue : bookcatalogues) {
                Object[] row = new Object[4]; //was 4
                row[0] = bookcatalogue.getISBN();
                row[1] = bookcatalogue.getTitle();
                row[2] = bookcatalogue.getAuthor();
                row[3] = bookcatalogue.getGenre();
                model.addRow(row);
        }
    }
    
    private void refreshPhysicalBookTable() {
        List<PhysicalBook> physicalbooks = PhysicalBookDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTablePhysicalBook.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (PhysicalBook physicalbook : physicalbooks) {
                Object[] row = new Object[2]; //was 4
                row[0] = physicalbook.getID();
                row[1] = physicalbook.getISBN();
                model.addRow(row);
        }
    }
    
    private void refreshCheckoutTable() {
        List<Checkout> checkouts = CheckoutDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableCheckout.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Checkout checkout : checkouts) {
                Object[] row = new Object[6]; //was 4
                row[0] = checkout.getID();
                row[1] = checkout.getBookID();
                row[2] = checkout.getMemberID();
                row[3] = checkout.getCheckoutDateTime();
                row[4] = checkout.getReturnDateTime();
                row[5] = checkout.getAmountdue();
                model.addRow(row);
        }
    }
    private void getAllAuthor(String author) {
        List<BookCatalogue> bookcatalogues = BookCatalogueDAO.getAllAuthors(author);
        DefaultTableModel model = (DefaultTableModel) jTableCatalog.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (BookCatalogue bookcatalogue : bookcatalogues) {
                Object[] row = new Object[4]; //was 4
                row[0] = bookcatalogue.getISBN();
                row[1] = bookcatalogue.getTitle();
                row[2] = bookcatalogue.getAuthor();
                row[3] = bookcatalogue.getGenre();
                model.addRow(row);
        }
    }
    
    private void getAllTitle(String title) {
        List<BookCatalogue> bookcatalogues = BookCatalogueDAO.getAllTitles(title);
        DefaultTableModel model = (DefaultTableModel) jTableCatalog.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (BookCatalogue bookcatalogue : bookcatalogues) {
                Object[] row = new Object[4]; //was 4
                row[0] = bookcatalogue.getISBN();
                row[1] = bookcatalogue.getTitle();
                row[2] = bookcatalogue.getAuthor();
                row[3] = bookcatalogue.getGenre();
                model.addRow(row);
        }
    }
    
    private void getAllGenre(String genre) {
        List<BookCatalogue> bookcatalogues = BookCatalogueDAO.getAllGenres(genre);
        DefaultTableModel model = (DefaultTableModel) jTableCatalog.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (BookCatalogue bookcatalogue : bookcatalogues) {
                Object[] row = new Object[4]; //was 4
                row[0] = bookcatalogue.getISBN();
                row[1] = bookcatalogue.getTitle();
                row[2] = bookcatalogue.getAuthor();
                row[3] = bookcatalogue.getGenre();
                model.addRow(row);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        MemberDAO = new MemberDAO();
        BookCatalogueDAO = new BookCatalogueDAO();
        PhysicalBookDAO = new PhysicalBookDAO();
        CheckoutDAO = new CheckoutDAO();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePickerCheckout;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePickerReturn;
    private javax.swing.JButton jButtonCreateBookCatalogue;
    private javax.swing.JButton jButtonCreateCheckout;
    private javax.swing.JButton jButtonCreateMember;
    private javax.swing.JButton jButtonCreatePhysicalBook;
    private javax.swing.JButton jButtonDeleteBookCatalogue;
    private javax.swing.JButton jButtonDeleteCheckout;
    private javax.swing.JButton jButtonDeleteMember;
    private javax.swing.JButton jButtonDeletePhysicalBook;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonUpdateBookCatalogue;
    private javax.swing.JButton jButtonUpdateCheckout;
    private javax.swing.JButton jButtonUpdateMember;
    private javax.swing.JButton jButtonUpdatePhysicalBook;
    private javax.swing.JComboBox<String> jComboBoxCatalog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelPartID;
    private javax.swing.JLabel jLabelPartID1;
    private javax.swing.JLabel jLabelPartID2;
    private javax.swing.JLabel jLabelPartStationID;
    private javax.swing.JLabel jLabelPartStationID1;
    private javax.swing.JLabel jLabelPartStationID2;
    private javax.swing.JLabel jLabelStationColor;
    private javax.swing.JLabel jLabelStationColor1;
    private javax.swing.JLabel jLabelStationColor2;
    private javax.swing.JLabel jLabelStationColor3;
    private javax.swing.JLabel jLabelStationColor4;
    private javax.swing.JLabel jLabelStationColor5;
    private javax.swing.JLabel jLabelStationColor6;
    private javax.swing.JLabel jLabelStationID;
    private javax.swing.JLabel jLabelStationID1;
    private javax.swing.JLabel jLabelStationID2;
    private javax.swing.JLabel jLabelStationID3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPaneTablePart;
    private javax.swing.JScrollPane jScrollPaneTablePart1;
    private javax.swing.JScrollPane jScrollPaneTablePart2;
    private javax.swing.JScrollPane jScrollPaneTablePart3;
    private javax.swing.JScrollPane jScrollPaneTableStation;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableBookCatalogue;
    private javax.swing.JTable jTableCatalog;
    private javax.swing.JTable jTableCheckout;
    private javax.swing.JTable jTableMember;
    private javax.swing.JTable jTablePhysicalBook;
    private javax.swing.JTextField jTextFieldBookCatalogueAuthor;
    private javax.swing.JTextField jTextFieldBookCatalogueGenre;
    private javax.swing.JTextField jTextFieldBookCatalogueISBN;
    private javax.swing.JTextField jTextFieldBookCatalogueTitle;
    private javax.swing.JTextField jTextFieldCatalog;
    private javax.swing.JTextField jTextFieldCheckoutAmountDue;
    private javax.swing.JTextField jTextFieldCheckoutBookID;
    private javax.swing.JTextField jTextFieldCheckoutID;
    private javax.swing.JTextField jTextFieldCheckoutMemberID;
    private javax.swing.JTextField jTextFieldMemberEmail;
    private javax.swing.JTextField jTextFieldMemberFirstName;
    private javax.swing.JTextField jTextFieldMemberID;
    private javax.swing.JTextField jTextFieldMemberLastName;
    private javax.swing.JTextField jTextFieldMemberPhoneNumber;
    private javax.swing.JTextField jTextFieldPhysicalBookID;
    private javax.swing.JTextField jTextFieldPhysicalBookISBN;
    // End of variables declaration//GEN-END:variables
}
